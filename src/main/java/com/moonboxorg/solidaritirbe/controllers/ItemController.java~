package com.moonboxorg.solidaritirbe.controllers;

import com.moonboxorg.solidaritirbe.dto.ApiResponse;
import com.moonboxorg.solidaritirbe.exceptions.ResourceNotFoundException;
import com.moonboxorg.solidaritirbe.models.GetFilteredItemsInputModel;
import com.moonboxorg.solidaritirbe.services.impl.ItemServiceImpl;
import com.moonboxorg.solidaritirbe.utils.ApiResponseBuilder;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;

@Validated
@RestController
@RequiredArgsConstructor
@RequestMapping(value = "/api/v1/items", produces = APPLICATION_JSON_VALUE)
public class ItemController {

    private final ItemServiceImpl itemService;

    @GetMapping
    public ResponseEntity<ApiResponse<Object>> getItems(
            @RequestParam(required = false) Long id,
            @RequestParam(required = false) Long productId,
            @RequestParam(required = false) Long categoryId,
            @RequestParam(required = false) Long packageId,
            @RequestParam(required = false) Integer expInDays
    ) throws ResourceNotFoundException {
        GetFilteredItemsInputModel input = new GetFilteredItemsInputModel();
        input.setId(0L);
        input.setProductId(0L);
        input.setCategoryId(0L);
        input.setPackageId(0L);
        input.setExpInDays(0);


        return ApiResponseBuilder.success(itemService.getAllItems());
    }
}
